"""
Author: Thomas Sutter
Description:
    Code here creates the class "Model" that allows one 
    to initialize an Ising model and execute time evolution upon it.
    This script contains most of the heavier computational functions of this project
"""

# Path for imageJ: C:\Users\thoma\Documents\GitHub\Ising-Model\results\default\time_sequence

import numpy as np
from numpy.random import rand
import matplotlib
import matplotlib.pyplot as plt
from matplotlib import cm
import tifffile
import scipy as sci
import os
import time
from numba import jit

# Configure plot settings
from matplotlib import rcParams
#rcParams.update({'figure.autolayout': True})
SMALL_SIZE = 8
MEDIUM_SIZE = 10
BIGGER_SIZE = 12
#plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=12)     # fontsize of the axes title
plt.rc('axes', labelsize=12)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=12)    # fontsize of the tick labels
plt.rc('ytick', labelsize=12)    # fontsize of the tick labels
plt.rc('legend', fontsize=12)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)

def fit_func(t, tau, beta):
    return np.exp(-(np.abs(t)/np.abs(tau))**np.abs(beta))

@jit(nopython = True)
def evolve(steps, sites, gamma, longevities, state, state_history, tconv = 20):
    for i in range(steps):
        for j in range(sites):
            if gamma  > np.random.random():
                state[j] *= -1
                longevities.append(0)
            else:
                longevities[-1] += 1
            
            if state[j] < 0 and state_history[-1] > -1:
                state_history.append(state_history[-1] - 2/tconv)
            elif state[j] > 0 and state_history[-1] < 1:
                state_history.append(state_history[-1] + 2/tconv)
            else:
                state_history.append(state_history[-1])
                
            if state_history[-1] > 1:
                state_history[-1] = 1
            if state_history[-1] < -1:
                state_history[-1] = -1
                
    return longevities, state_history
            

def run(steps = int(5e6), gamma = 0.01, tconv = 1, verbose = True, save = True):
    state = 1
    sites = 1
    state = np.ones(sites)
    for i in range(len(state)):
        if i%2 == 0:
            state[i] *= -1
    
    state_history = [np.sum(state)]
    longevities = [0]
    
    longevities, state_history = evolve(steps, sites, gamma, longevities, state, state_history, tconv = tconv)
    
    
    tt = np.linspace(0,max(longevities),int(max(longevities)))
    # ~ yy = gamma*np.exp(-gamma*tt)
    yy = gamma**2*tt*np.exp(-gamma*tt)
    
    if verbose:
        plt.plot(tt,yy)
        plt.text(0, 0, r'L(t) = $\gamma^2 t e^{-\gamma t}$', size = 15)
        plt.hist(longevities, color = 'k', histtype = 'step', density = True, bins = 50, weights = longevities)
        plt.xlabel('Longevity (steps)')
        plt.ylabel('Counts (weighted to longevity)')
        plt.show()
    
    
    state_history = np.array(state_history)
    # ~ state_history = np.sin(0.03*np.arange(len(state_history)))
    
    if verbose:
        plt.plot(state_history, 'k-')
        plt.xlabel('Step Number')
        plt.ylabel('State')
        plt.show()
    
    Ssqr = np.abs(np.fft.fftshift(np.fft.fft(state_history)))**2
    freqs = np.linspace(-np.pi, np.pi, len(state_history))
    
    # ~ plt.plot(freqs, Ssqr)
    # ~ plt.plot(ww, max(Ssqr)/max(yy)*yy)
    # ~ plt.hist(freqs, weights = Ssqr, bins = 2000)
    # ~ plt.show()
    
    
    corr = sci.signal.correlate(state_history, state_history, mode = 'same')
    corr = corr/np.max(corr)
    # ~ corr = corr/(state_history[0]*len(state_history))
    # ~ corr_norm = np.sum(state_history)**2
    # ~ corr /= corr_norm
    
    t_corr = np.linspace(-len(corr)/2,len(corr)/2,len(corr))
    
    # ~ yy = np.exp(-2*gamma*np.abs(tt))
    print(corr.shape)
    
    fit_interval = 10000
    tt = np.linspace(-fit_interval,fit_interval,50000)
    p0 = [100, 1]
    popt, pcov = sci.optimize.curve_fit(fit_func, t_corr[len(corr)//2:len(corr)//2+fit_interval], corr[len(corr)//2:len(corr)//2+fit_interval], p0 = p0)
    print(popt)
    yy = fit_func(tt, *popt)
    yy_guess = fit_func(tt, *p0)
    
    if verbose:
        plt.plot(t_corr, corr, 'k-')
        plt.plot(tt, yy, 'g-', linewidth = 3, alpha = 0.6)
        # ~ plt.plot(tt, yy_guess, 'b--')
        plt.xlabel('t (steps)')
        plt.ylabel('Correlation')
        plt.show()
        
    if save:
        np.savetxt('data_corr.txt', np.array([t_corr[len(corr)//2:len(corr)//2+fit_interval], corr[len(corr)//2:len(corr)//2+fit_interval]]).transpose(), delimiter = ',')
        
    return popt
    
def generate_beta_plot():
    tconv_list = list(range(1,1000,100))
    print(tconv_list)
    # ~ tconv_list = np.linspace(0/50,1,50)
    # ~ beta = [0.9860, 1.017, 1.019, 1.0348, 1.0484, 1.0571, 1.0722, 1.0752, 1.0783, 1.0883, 1.1449, 1.19390364]
    beta_list = []
    tau_list = []
    for ti in range(len(tconv_list)):
        print(f'ti: {ti+1}/{len(tconv_list)}')
        tau, beta = run(steps = int(1e7), tconv = tconv_list[ti], verbose = False)
        tau_list.append(abs(tau))
        beta_list.append(abs(beta))
    
    print('beta_list',beta_list)
    print('___________________')
    print('tau_list',tau_list)
    plt.scatter(tconv_list, beta_list)
    plt.show()
    
def plot1():
    # This variable is the dimensionless quantity gamma*t_conv (that is the ratio of the conversion time to the average flipping time)
    # ~ tgconv_list_123 = 0.01*np.array(list(range(1,200)))
    # ~ tgconv_list_4 = 0.05*np.array(list(range(1,200,4)))
    # ~ tgconv_list_5 = 0.005*np.array(list(range(1,400,4)))
    
    # ~ beta1 = [1.0051908266587077, 1.0323351676096368, 1.0540635595553194, 1.0108549639991538, 1.0419320358708242, 1.0204118933820139, 1.0746979955562639, 1.0821432558654114, 1.0921489553934445, 1.0810106393424188, 1.0781348023072856, 1.1104745894164407, 1.151228199363512, 1.1608767251841456, 1.1523492239072228, 1.107394999984028, 1.2023019906451735, 1.1878271204908242, 1.1962927179523886, 1.244074163796334, 1.2250307831900542, 1.260283269253487, 1.175932986484861, 1.293038026563127, 1.2541016883704497, 1.2584096943318743, 1.2876129114472046, 1.2700292454737716, 1.3032308277316351, 1.2642495018744209, 1.3136144961185898, 1.3183880526013845, 1.2705141446172543, 1.3497290576666976, 1.3309173957623233, 1.320586884138832, 1.3119204379192295, 1.3126494385631315, 1.4006095571184511, 1.4160700957732584, 1.409499655375308, 1.3170739473620627, 1.4479932953864172, 1.483251138359838, 1.3652694969944261, 1.4362099460751065, 1.4593794344884146, 1.460803738783192, 1.3601591056441737, 1.467521223723846, 1.466946709730456, 1.4493588074543577, 1.4214526146989064, 1.503338404795256, 1.5627814707975045, 1.4939442277671366, 1.4467545079283286, 1.5285964982850286, 1.500788627662651, 1.5062596804208275, 1.4669173291050246, 1.4451585008479588, 1.4526509393940517, 1.4977505949568064, 1.5389430938384554, 1.5293697524717231, 1.5675983433837903, 1.5101792044824611, 1.5823949352098394, 1.5159413819532894, 1.5023300168430174, 1.575359077366619, 1.5913567696082185, 1.497662294278995, 1.5713119885376963, 1.6084616095412776, 1.5985122099424898, 1.5540407446401892, 1.5294202445192602, 1.562466873109265, 1.5417489619817009, 1.5914239433382553, 1.5418183275932202, 1.5132969737447943, 1.584971829207065, 1.6197158751115335, 1.5392637440921022, 1.4866409362808788, 1.5052070685379912, 1.5056866097893993, 1.5569340867027095, 1.4400319935575914, 1.5778497537633174, 1.4665093303699768, 1.559055446437304, 1.5829886193776808, 1.5895568229385626, 1.5563355328625492, 1.4764260488809808, 1.5396621768531962, 1.5644261371612207, 1.5773869380448202, 1.6509055301994693, 1.5774853580246015, 1.529689493120635, 1.569749525824627, 1.57225722958165, 1.514452112978386, 1.5146018523126166, 1.6164317112426623, 1.493850585916614, 1.5091670314632057, 1.572583047734266, 1.5169900101507248, 1.5938283979496404, 1.5354314388308494, 1.5165921286441006, 1.4854482587250828, 1.4870477629862253, 1.433338463255836, 1.5893323628310294, 1.5134475500171143, 1.5774493167557255, 1.467350734097401, 1.4319727282640788, 1.5315649371757876, 1.5881665423651645, 1.5007381578454413, 1.5397503832769748, 1.5566514409652694, 1.4530529887114114, 1.5735921173519964, 1.5531490174951583, 1.5142103231178714, 1.4817318791721517, 1.5238295558227368, 1.3775887661927795, 1.4078271737672259, 1.5201524817488057, 1.488722592604623, 1.4361880853986346, 1.5779890602010946, 1.3699075100066687, 1.4766013292721227, 1.534344768727202, 1.5453328550125345, 1.505970959533609, 1.4012432980397, 1.4405567487131599, 1.4981291304937752, 1.4494776584546694, 1.4887326610556137, 1.4981166186741157, 1.4030057793977682, 1.4460609966984286, 1.4128801105462996, 1.5397683651611556, 1.5043935769606018, 1.5342077652009791, 1.4393381529827936, 1.450441350663173, 1.4885484271477185, 1.4836774939154787, 1.357285279771385, 1.4468967021729535, 1.4547508219915946, 1.5018834217851453, 1.3608420675182227, 1.431515983131133, 1.4495248787380512, 1.4256672796377892, 1.4572640073655712, 1.3783875321316659, 1.4143540302070394, 1.48388772733675, 1.4294648560111654, 1.470030551705237, 1.4237024074676152, 1.4510875786882127, 1.3734888529051275, 1.4886751177611328, 1.3649339874196706, 1.4582283177121094, 1.384902605243352, 1.4593766934207701, 1.4842165490714565, 1.3938182686057004, 1.3297104549934906, 1.3018731997181094, 1.395785692074975, 1.3658528255562241, 1.3431090481630452, 1.3537158699037963, 1.41855627978684, 1.3788140219265046, 1.3843042045191054, 1.1841128258997256, 1.3959838064213301, 1.2943071395360597]
    # ~ beta2 = [1.0234177286883868, 1.001171352383663, 1.0141414235689243, 1.0187363360601518, 1.0212793836203873, 1.0565071038752059, 1.0880254078694258, 1.0959558731003, 1.1053874194127313, 1.1401972301977334, 1.1055721272689814, 1.0764957316157728, 1.123012835827412, 1.1448008799478957, 1.1279324571846023, 1.1903145486548226, 1.2149247205390938, 1.207197631777649, 1.1960847685614746, 1.1922226318390003, 1.1683051004479752, 1.203415359210849, 1.1905512850576314, 1.2175344135292703, 1.2277713683879317, 1.2418185652971885, 1.2338769624880954, 1.2228630128623166, 1.221350206167377, 1.3047838628175288, 1.2716939255373299, 1.2812417812604135, 1.322057772183126, 1.331498509365471, 1.3035797808234062, 1.3317026650415695, 1.3476663094030696, 1.4011131875462877, 1.3908237125035734, 1.3597956547933765, 1.321510593656666, 1.365118738376353, 1.4224496888787699, 1.4491831656173302, 1.4538073806297391, 1.4158734512823519, 1.4443153444840295, 1.483252575619252, 1.4569635715846254, 1.4428086352555411, 1.5204757400699294, 1.4761483045662205, 1.4404625998197627, 1.4881534185809235, 1.5244506724671951, 1.4933715546534545, 1.5054933711805683, 1.4706169663512711, 1.4917354970976995, 1.5389671541935064, 1.532590111264641, 1.5304512462695345, 1.4816001403780354, 1.5296322159902669, 1.5024381025493467, 1.6174945207256992, 1.4628959179306504, 1.55501952628608, 1.4735023178783662, 1.5160960296407118, 1.5688926938183174, 1.5549141242523827, 1.5030231823937008, 1.5394500842338374, 1.5690254488919013, 1.5305582527774937, 1.4879562453237807, 1.5821238122504686, 1.4948500825525617, 1.6216195470655126, 1.564751835416331, 1.428705665343754, 1.5731843736109494, 1.5925094255969026, 1.5993848738944891, 1.538747120014627, 1.594984351568066, 1.571867618041524, 1.509351107851384, 1.516954613417589, 1.6183962437706243, 1.588121291508909, 1.560904306743117, 1.5817969737758515, 1.6814366163553909, 1.5688451077908, 1.6076450032314373, 1.5326111415732222, 1.459560151516369, 1.5365383086082964, 1.5541554816770824, 1.5040494560526014, 1.5451676793575415, 1.5886800013606062, 1.4685683512925103, 1.5334662332513973, 1.4991823028187512, 1.4882853925518402, 1.5147941419959503, 1.5333332983169974, 1.5587705883073628, 1.4781300509576387, 1.5542013345650687, 1.5620513463811925, 1.495669009237779, 1.479383686226192, 1.619260086845811, 1.5009972365182238, 1.5582094868898553, 1.5313084542782023, 1.5518411371506642, 1.5839134327932929, 1.4954184611727481, 1.455313651152763, 1.5191449299568647, 1.5611524570877098, 1.4348345925296957, 1.520419372411114, 1.3558225376509927, 1.5127902301566036, 1.4927636504463493, 1.5172448735734376, 1.5788290102727724, 1.4066151418753712, 1.4211217445381823, 1.5507377325866936, 1.5205418612193644, 1.3932276405164048, 1.5086052624381276, 1.5341419095065565, 1.4591738913047418, 1.4567339738580698, 1.501693901309928, 1.516794132023191, 1.504326621329466, 1.4820164243629097, 1.5273035326880338, 1.5556327045696727, 1.472788271494095, 1.5048199133070121, 1.5208962760475486, 1.4920998608405285, 1.531831610571703, 1.4743622935740066, 1.4474387746207296, 1.4319350257229646, 1.5019015851321604, 1.3882334138806471, 1.5259576239937764, 1.4156442386680146, 1.518971440861595, 1.4327775037756623, 1.4644155529212315, 1.4562205395880305, 1.4652074703036402, 1.4335550977936036, 1.4795955836265424, 1.4463452580621405, 1.4645216690186575, 1.4112616853767208, 1.50344072254937, 1.4601013239923095, 1.5353757342411465, 1.3197262398021874, 1.4102219151768274, 1.4264642181094045, 1.448281122870497, 1.4541056231176361, 1.4294250608257473, 1.3416521194901565, 1.3104865376381543, 1.499282216027996, 1.4307375088819776, 1.4038548390974497, 1.4073624862091618, 1.467339075316098, 1.3384808162531463, 1.3600731744256747, 1.4633284448747843, 1.3056520805124079, 1.512067306755071, 1.46006058791507, 1.4130871177629938, 1.428833894555167, 1.2868722437294613, 1.3493015312011722, 1.3348553797412064, 1.3726692916735121, 1.4301308826334105]
    # ~ beta3 = [1.0238007373467237, 1.0074415165161343, 1.0144713331063002, 1.0275533130592989, 1.061521128911358, 1.076564118018017, 1.0571249204486892, 1.0360021529086514, 1.0884948824291323, 1.0718043452691781, 1.1221687522950183, 1.0826331245180625, 1.132390740165778, 1.1442216292133542, 1.153030374138407, 1.149505072394745, 1.1029797407903235, 1.1662116169439538, 1.19780451444852, 1.222057666961747, 1.2073470213152842, 1.2225532050874894, 1.1831415003909185, 1.278983322914784, 1.2614908797895172, 1.212908295387602, 1.2374623219254477, 1.317647013064664, 1.2467320515580882, 1.2789663988350497, 1.3651975475776301, 1.3353414767403633, 1.2466222279342445, 1.3173402493761752, 1.3108914408469414, 1.3163756522130565, 1.2786499434448166, 1.373754320352476, 1.3673688795458867, 1.4539085430474938, 1.3154103312413352, 1.3643818661568228, 1.4811575890553894, 1.4465317686029715, 1.4132540660950788, 1.4112901008656993, 1.3828717756265532, 1.4229880529574759, 1.4489559196395243, 1.4286233965095012, 1.4961224202160024, 1.5015219022359485, 1.4314175748342979, 1.4081330507532768, 1.4636810443262394, 1.5085856603520338, 1.4585530600369434, 1.4416701469009654, 1.5258521153570794, 1.45696091431464, 1.416374660797931, 1.5177503170431053, 1.5677184769445551, 1.4504817674404813, 1.5429570649023623, 1.5381075472453907, 1.50476327943425, 1.4502201095009946, 1.5329841122669305, 1.5667617092186683, 1.5769237086714571, 1.5748747035629804, 1.5995166360684088, 1.6403559462709738, 1.4996132134659563, 1.5305528653442622, 1.531398592787809, 1.5077974324499734, 1.553643302325096, 1.483681588467136, 1.5387520250169209, 1.4895744511534106, 1.5315069363198492, 1.5922361122891806, 1.5397291061503187, 1.6075641350798806, 1.5226848863479825, 1.6259258748714889, 1.5371318906946578, 1.4936022985706334, 1.5270498590164918, 1.5415396895312388, 1.6143001140039175, 1.5181633165343171, 1.4830379446916684, 1.5230925469000418, 1.5693880951782357, 1.589994646005671, 1.550042019609166, 1.563760278617328, 1.5605670093796915, 1.498445449224161, 1.611691730810958, 1.5615216919240826, 1.5796286651464706, 1.5127054072559798, 1.5425376691209387, 1.5431373579331225, 1.4796247647967253, 1.431707376307475, 1.5923623489792664, 1.591624619352644, 1.541904778362231, 1.5555889810799428, 1.4701155911194241, 1.56833801558508, 1.550900396908372, 1.4164618038148447, 1.4749419401634571, 1.5178949853695125, 1.4516100106590162, 1.4719122019200397, 1.526981915238885, 1.4192720982941616, 1.441645331849984, 1.5667195930025184, 1.528335561417857, 1.544996619340507, 1.5286759713779268, 1.5507020508801674, 1.5264889986689447, 1.5346984623027835, 1.5317522260512735, 1.5363694895486564, 1.5659142581542995, 1.5279584083048696, 1.5564507508020453, 1.4672392542595476, 1.438907880338841, 1.627472312527162, 1.4633347611722052, 1.4753749819934838, 1.5207967625978904, 1.4698096118288047, 1.5506973728909732, 1.5205686734339037, 1.5679226692794268, 1.52100690588603, 1.5136380242109557, 1.4129892560074033, 1.3804861565338666, 1.4809233045015282, 1.4861502009763807, 1.4584613514420361, 1.3919608615707213, 1.526550130305829, 1.4134466561879215, 1.5439382097047354, 1.4825591175368944, 1.4653887340510527, 1.498502944810778, 1.359035119602628, 1.3703017334116914, 1.4567013840307672, 1.389421841437108, 1.4355245715961078, 1.4213743750128307, 1.4426932267346768, 1.3598859517828612, 1.4877678083838528, 1.3953535712506315, 1.5145691923585785, 1.4353781305960205, 1.399494019665449, 1.4128649424480755, 1.4770327546205362, 1.399908203161931, 1.4148727807550083, 1.4912817724546248, 1.4311441607425148, 1.4009100711058844, 1.4379516914129156, 1.3875830090071828, 1.4793650952851993, 1.486848905246109, 1.3805586255318585, 1.3770509079316522, 1.3307668931245635, 1.4525544305834532, 1.5155517607602984, 1.408982723165492, 1.5169589878927583, 1.3620072235032277, 1.420418190007421, 1.4385022375026495, 1.3038037346316522, 1.336830079969039, 1.3935361234705703, 1.3442967037112237]
    # ~ beta4 = [1.0047935592561077, 1.2558254228946373, 1.415018554698395, 1.539986725682067, 1.5691670298933669, 1.532790469532272, 1.497018515297254, 1.4562266720287995, 1.4671857106144988, 1.3640112199542795, 1.353005465795272, 1.2950583069446484, 1.3109010406425996, 1.238498393143463, 1.2006714049813878, 1.2004098473620008, 1.1825054647677578, 1.143186091010378, 1.095624476616102, 1.1726873784555105, 1.0430232357809803, 1.1186112046210566, 1.0936216658241655, 1.0523437074366448, 1.0489163810135935, 1.0635305011361396, 1.0847988694965751, 1.0756740199898713, 1.0929398673084114, 1.0602364458305622, 1.031605666218686, 1.1175571145218564, 1.0161700649661949, 1.0400872717446132, 1.0649219851324945, 0.9618664721210197, 1.0440885690825892, 1.1219764716916507, 1.0847814404829201, 0.9993753048896225, 1.0883558931044182, 0.996357812614738, 1.069932609358456, 1.0312142174296672, 0.9032272177478433, 0.9517543156174749, 1.066585911109337, 1.0349714528300933, 1.0282992880847952, 1.0625745605814418]    
    # ~ beta5 = [0.988622314631726, 1.0460801137421907, 0.9674216377779206, 1.0398822423763352, 1.133478188792277, 1.1602920516039257, 1.1070993984898765, 1.149702505030377, 1.142705259248621, 1.183399325196457, 1.2100584810201818, 1.239885528885578, 1.2345261208285174, 1.2332268466704575, 1.301966665454076, 1.36446198684345, 1.3059231060742325, 1.3548594786230452, 1.2590231625244228, 1.3891320569936283, 1.3412483484539008, 1.4638707223688898, 1.483355088660973, 1.3883582441895737, 1.4217986567827565, 1.4328402862263498, 1.4869102735720539, 1.3717790015823952, 1.5338580102379695, 1.5914960313189843, 1.4383456515801691, 1.5412238810236925, 1.4684626147167308, 1.5363930030943536, 1.4891888223383178, 1.620600852516072, 1.4684682296686586, 1.5812640533011, 1.6490343405972305, 1.52234792427166, 1.465147899186767, 1.5498907470157641, 1.5525037425862178, 1.5474652716383683, 1.502266586327285, 1.4521588355756039, 1.498641233401792, 1.5181159280866918, 1.5539821701126288, 1.5487788316588662, 1.4875126996502364, 1.576149669214004, 1.4459857849102007, 1.5835583092203105, 1.543696585078598, 1.4578938258486778, 1.5511080156669312, 1.570256499295193, 1.5158073505727372, 1.5209641268726743, 1.560890114453229, 1.5508618275450634, 1.5219548890764534, 1.5959444400148837, 1.5011807715391356, 1.4478287715242677, 1.4772628018885903, 1.5184469382705594, 1.5963187105096441, 1.5440285219085848, 1.5261621418856708, 1.4972859204087137, 1.32792459166434, 1.5208329551218975, 1.4456707168326626, 1.4333611206819796, 1.4496719103104985, 1.4981005595253731, 1.5626384346870767, 1.4481870405904238, 1.3803334896216863, 1.4994740609014754, 1.3023487023654747, 1.419708586170183, 1.3963108576581884, 1.354665384125279, 1.4570394509266353, 1.4412230726930564, 1.544297039769266, 1.495450949589626, 1.5120192817761284, 1.4253913484642677, 1.3767106100926036, 1.351404841944938, 1.3274839600127768, 1.4563987848050075, 1.4062457849089998, 1.367118541205928, 1.3673758274343317, 1.398715400573069]
    
        
    beta_2 = [0.9870455479914723, 1.0825916021461897, 1.21092134554961, 1.2923339134244434, 1.3524996217250667, 1.4275265543666955, 1.508589630852935, 1.521023690084956, 1.525221143536209, 1.567841763585951]
    tgconv_list_2 = np.array(list(range(1,200,20)))*0.005
    
    beta_1 = [0.9898989918353365, 1.0945659673338148, 1.2119055696222996, 1.2982778463839413, 1.3665035984309377, 1.4495884541789363, 1.482744560766282, 1.5235271743621255, 1.5542861371723773, 1.553679285558127]
    tgconv_list_1 = np.array(list(range(1,100,10)))*0.01
    
    # ~ beta_3 = [0.9946683787932857, 1.0959931429296876, 1.2157265821154406, 1.328071014905211, 1.426971509895145, 1.5095519893813028, 1.5316248618517527, 1.5884531208787838, 1.611411518097813, 1.6165515002109934]
    # ~ beta_3 = [1.0187257804278258, 1.0754856572355393, 1.2051446860455413, 1.3208994400774587, 1.4205554431337313, 1.4834795688891849, 1.5099037880236685, 1.5738484952114764, 1.608996180257351, 1.6195299351713024]
    beta_3 =  [1.01690061338101, 1.107494146000068, 1.2193118407143604, 1.2960912932131003, 1.398393727053662, 1.4575014658703287, 1.5282635405302056, 1.5794252509958155, 1.58929911705787, 1.644054076378026]
    tgconv_list_3 = np.array(list(range(1,1000,100)))*0.001
    
    beta_avg = (np.array(beta_1) + np.array(beta_2) + np.array(beta_3))/3
    
    # ~ beta_avg = (np.array(beta1) + np.array(beta2) + np.array(beta3))/3
    plt.scatter(tgconv_list_1, beta_1, alpha = 0.5, label = r'$\gamma$ = 0.01')    
    plt.scatter(tgconv_list_2, beta_2, alpha = 0.5, label = r'$\gamma$ = 0.005')
    plt.scatter(tgconv_list_3, beta_3, alpha = 0.5, label = r'$\gamma$ = 0.001')
    
    # ~ plt.plot(tgconv_list_3, beta_avg, 'k-', alpha = 0.5, label = r'avg', linewidth = 5)
    
    tt = np.linspace(0,10,1000)
    coefs = np.polyfit(tgconv_list_1, beta_avg, deg = 2)

    yy = 0
    for i in range(len(coefs)):
        yy += coefs[i]*tt**(len(coefs) - i - 1)
    # ~ yy = coefs[0]*tt**5+coefs[1]*tt**4+coefs[2]*tt**3 + coefs[3]*tt**2 + coefs[4]*tt + coefs[5]
    plt.plot(tt, yy, 'k-', linewidth = 3, zorder = 10, alpha = 0.5)
    
    plt.xlim([0,1])
    plt.ylim([1,1.8])
    plt.xlabel(r'$\gamma t_\text{conv}$')
    plt.ylabel(r'$\beta$')
    
    plt.legend()
    plt.show()
    
def plot2():
    # This variable is the dimensionless quantity gamma*t_conv (that is the ratio of the conversion time to the average flipping time)
    tgconv_list = 0.04*np.array(list(range(1,50,2))) - 0.04
    
    #1e6 steps
    beta1 = [0.9826210156293435, 1.1179418188979937, 1.1984813141346993, 1.2669378623124472, 1.3797173110979613, 1.4112924310019037, 1.4624320251900502, 1.517885208670019, 1.5397368529933182, 1.562200421610123, 1.5318496791448573, 1.5409798633221223, 1.5794909050472716, 1.5065202586539945, 1.5558819341866683, 1.529368115335927, 1.4893560510079613, 1.5126363322305374, 1.4535766961797698, 1.5060549216116552, 1.3911030133309694, 1.4189889450027215, 1.3462542721652595, 1.421686395701354, 1.361588357922171]
    tau1 = [12.166087068035445, 13.138535469961578, 14.283620638320768, 15.568697373268964, 16.46711765135514, 17.976390845623545, 19.202008889506658, 20.567022283706645, 21.83681693327831, 23.47139455878626, 25.065154916828362, 26.72173699497767, 28.52569802060558, 30.551808321860463, 31.586249633736067, 33.501296651132556, 35.88113330049951, 37.19478437205161, 40.184472122215645, 41.56862986139239, 44.6286299090855, 45.71323937985469, 48.770389622850416, 49.900905414015924, 53.299824300977484]

    beta2 = [0.9958581871499573, 1.1026839856778734, 1.1947616457051158, 1.2923839511420796, 1.3571148464760392, 1.386340847373851, 1.4410228002065437, 1.5112956256470247, 1.5395865514814135, 1.5319816173682508, 1.574073632180737, 1.6275885063012607, 1.551224021293626, 1.5273980677135908, 1.5562402555556512, 1.5183533747730988, 1.5257592656797243, 1.510455127833828, 1.4800824568608495, 1.447789093894102, 1.3895639824570463, 1.4554025207854322, 1.3784687324938782, 1.385419106933934, 1.4110234774490076]
    tau2 = [11.858863268692435, 13.204178827584107, 14.390213189698846, 15.294915352967022, 16.587056553152763, 18.15985250613238, 19.526082747974453, 20.53889189673611, 22.066182879449418, 23.679004128428915, 24.927978186307175, 26.034920024900337, 28.385503499944523, 30.36847951384127, 31.566991154176616, 33.79352275943801, 35.34993459140951, 37.55903868753774, 39.19403413653225, 40.957161990775205, 44.392005736523565, 45.302920481561635, 49.01837122370993, 51.45474590222824, 52.7824098107653]

    beta3 = [1.007162970652125, 1.0951385086654948, 1.1900770016991766, 1.2572169183500623, 1.3202780318379472, 1.3976883063631924, 1.4378741198337956, 1.4773553421393304, 1.5355031752218347, 1.5198349665751134, 1.5301114678357848, 1.5268610458896636, 1.5612339435811824, 1.5394459039401427, 1.5620964052801989, 1.528400316233217, 1.5201826760903858, 1.4890318964316123, 1.4890126710586435, 1.4647533254460867, 1.4672154105899549, 1.3884655317630419, 1.409105289088968, 1.3527213594369822, 1.3809990290283685]
    tau3 = [12.008572491113451, 13.415233170092213, 14.350671744524483, 15.61235651694042, 16.779691064715472, 17.942112213513628, 19.20100502703807, 20.718304866960136, 21.912777776060295, 23.624917277859552, 25.104583107339703, 26.803225559954832, 28.158905852427274, 29.91436412832765, 31.495963808570306, 33.69859872158536, 35.59783861866392, 37.49482475856366, 39.13258047355335, 41.37310358935316, 43.24453179374728, 46.519431951975676, 47.85556236161908, 51.25668270558456, 52.4831583370276]

    beta4 = [0.9975221986535419, 1.098855057481601, 1.187576807550152, 1.2826687819678018, 1.3692489442563551, 1.4015504395249272, 1.4579055543964143, 1.5119193653275917, 1.5301898014588557, 1.5612651680474936, 1.5814031292164816, 1.5470428096598032, 1.584911745025116, 1.5707566311637977, 1.5256727456391073, 1.5181571698626912, 1.54324993289726, 1.4890845959919603, 1.4491200813077052, 1.4707111887559874, 1.4794789232320795, 1.3806222465594478, 1.372756678542489, 1.387889130925213, 1.4179868173924979]
    tau4 = [12.018669169841855, 13.208687408795225, 14.37381612903624, 15.40119795202921, 16.561922615844576, 18.036153614500176, 19.2519597736335, 20.425367518800982, 22.081612151232754, 23.276897311646582, 24.916708609469563, 26.622429750782462, 28.197462486290714, 29.702572053057427, 31.83729063150216, 33.70456375562523, 35.284140023556496, 37.75115958157118, 39.64041515869709, 41.90906826106289, 42.885882139106, 46.49626381402395, 48.85994707672904, 50.34355189168353, 52.40324031393832]
    
    
    
    
    # ~ beta_avg = (np.array(beta1) + np.array(beta2) + np.array(beta3) + np.array(beta4))/4
    # ~ tau_avg = (np.array(tau1) + np.array(tau2) + np.array(tau3) + np.array(tau4))/4
    
    #1e7 steps
    beta5 = [1.002000057204661, 1.0990228806464786, 1.189658595602751, 1.2693864868422986, 1.3474712909662574, 1.413157667148563, 1.4587397175396961, 1.4917381135380892, 1.5169602993361104, 1.5504537819977278, 1.5513461660544456, 1.5423797634832406, 1.5548629134323886, 1.544686365618972, 1.5311408301047302, 1.5175157711390643, 1.5097389443414808, 1.4747117720767953, 1.4690454294454396, 1.4423259417132552, 1.4444719129954873, 1.4140693820903485, 1.4039594042255548, 1.3864082451016129, 1.3627735049588552]
    tau5 = [11.969451660661568, 13.225149017471882, 14.33137692830241, 15.481198450800866, 16.618767355447645, 17.8707246175333, 19.265068002650747, 20.62631528634507, 22.07749358458196, 23.46547857173961, 25.143016825572296, 26.717153353366427, 28.377230730160985, 30.094736375980897, 31.901910320412078, 33.76842993587696, 35.519251076440966, 37.76369562092536, 39.71429729061826, 41.74126894850725, 43.75056115444731, 46.05665923229771, 48.290875772844224, 50.73773561917246, 53.03970507734007]
    
    beta6 = [1.0004525320622684, 1.1008077821609428, 1.1869569139326097, 1.2691961411648212, 1.349680146995647, 1.417237354694147, 1.4648361736535378, 1.5087134019595645, 1.5222010605260257, 1.5351041041316977, 1.5441158607105623, 1.5552096214304483, 1.552349848601854, 1.5372601009774172, 1.521991605184082, 1.4994732236222013, 1.487479949355138, 1.493271972136778, 1.4609101520035204, 1.4570531353788223, 1.430402984748601, 1.4156422186839037, 1.3971054950660298, 1.3705175279660284, 1.3755579788298067]
    tau6 = [11.968659534808161, 13.281148028456077, 14.392203735223433, 15.498533854909983, 16.653638335162398, 17.877592307089092, 19.24496360469454, 20.599674528237163, 22.106763013574284, 23.639117840026056, 25.081567658351798, 26.67733037406612, 28.356153502695825, 30.157483973396968, 31.96080678759637, 33.92742757300753, 35.76197118547605, 37.52406330744997, 39.693805036400825, 41.68622356021414, 43.93868798348532, 45.96661705030946, 48.243889239169086, 50.840401353757876, 52.863975300326324]
    
    beta_avg = (np.array(beta5) + np.array(beta6))/2
    
    plt.scatter(tgconv_list, beta_avg, alpha = 0.5)
    
    coefs = np.polyfit(tgconv_list, beta_avg, deg = 4)
    print(coefs)
    tt = np.linspace(0,2,1000)
    # ~ yy = np.sqrt(2)*tt*np.exp(-tt) + 1
    # ~ yy = 3*np.sin(tt/2)*np.exp(-tt) + 1
    yy = coefs[0]*tt**4+coefs[1]*tt**3 + coefs[2]*tt**2 + coefs[3]*tt + coefs[4]
    plt.plot(tt, yy, 'g-')

    plt.xlabel(r'$\gamma t_\text{conv}$')
    plt.ylabel(r'$\beta$')
    
    plt.xlim([0, 1])
    
    plt.show()
    
# ~ generate_beta_plot()
# ~ popt = run(tconv = 1)
# ~ print(popt)
plot1()
plot2()

